% brumaltex2 - A compilation of LaTeX packages and macros used by the author.
%
% See the README.md file and comments below for documentation.
%
% Github: https://github.com/abstractednoah/brumaltex
% Author: Noah D. Ortiz <abstractednoah@brumal.org>

\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{brumaltex2}[2022/09/19]

% MODULE SYSTEM %%{1

% Setup %%{
\RequirePackage{xifthen}[2015/11/05]

\RequirePackage{kvoptions}
\SetupKeyvalOptions{
    family=brt@kvs,
    prefix=@brt@kvs@
}

\RequirePackage{pgffor}
\RequirePackage{pgfkeys}
\pgfkeys{/brt/.is family}
\pgfkeys{/brt/modules/.is family}

%%}

\ProvideDocumentCommand{\UseName}{m}{\csname #1\endcsname}

% \brt@declareBoolOption[init]{key} %%{
% Declare a boolean option using kvoption's `\DeclareBoolOption`, but also
% declare a complementary boolean option named "no<key>".
\ProvideDocumentCommand{\brt@declareBoolOption}{O{false} m}{
    \DeclareBoolOption[#1]{#2}
    \DeclareComplementaryOption{no#2}{#2}
}%%}

\ProvideDocumentCommand{\brt@mod@loadIfEnabled}{m}{%%{
    \UseName{if@brt@kvs@#1}
        \pgfkeys{/brt/modules/#1}
    \fi
}%%}

\newtest{\brt@mod@isLoadable}[1]{%%{
    \boolean{@brt@kvs@#1} \AND \( \NOT \boolean{brt@modules@#1@loaded} \)%
}%%}

% \brt@mod@declare{name}[dependencies][default]{code} %%{
% Create a new module with (\long) code. You must add a hash to arguments, i.e.
% `#n` -> `##n`. The code will be executed at most once. Dependencies should be
% comma-separated module names. By default, <default> is false, hence the module
% will only be loaded if the user asks for it. Set <default> to true if should
% be loaded unless user loads its complement. The module `enabled` is reserved
% and is defined to load the enabled modules. The module `all` is reserved and
% is defined to load all modules.
% TODO improve dependency system; ideally disabling a module should disable all
% modules that depend on it
\pgfkeysdef{/brt/modules/all}{}
\DeclareBoolOption{all}
\pgfkeys{/brt/modules/enabled/.append code={\brt@mod@loadIfEnabled{all}}}
\ProvideDocumentCommand{\brt@mod@declare}{m O{} O{false} +m}{
    \brt@declareBoolOption[#3]{#1}
    \newboolean{brt@modules@#1@loaded}
    \setboolean{brt@modules@#1@loaded}{false}
    \pgfkeysdef{/brt/modules/#1}{
        \typeout{Loading #1...}
        % TODO This is dumb, we should be able to use pgfkeys' 'styles' feature
        % to load dependencies, instead of manually calling pgfkeys here, but I
        % can't seem to get it to work.
        \ifthenelse{\NOT\boolean{brt@modules@#1@loaded}}{
            \pgfkeys{/brt/modules,#2}
            \typeout{Running #1...}
            #4
            \setboolean{brt@modules@#1@loaded}{true}
            \typeout{Ran.}
            \typeout{Loaded: #1}
        }{
            \typeout{Not loadable (disabled or already loaded): #1}
        }
    }
    \pgfkeys{/brt/modules/enabled/.append code={\brt@mod@loadIfEnabled{#1}}}
    \pgfkeys{/brt/modules/all/.append code={\pgfkeys{/brt/modules/#1}}}
} %%}

% \brt@mod@process %%{
% Process all options and load any modules that have been enabled. For each
% module, the dependencies are loaded first, then the module code. Order of
% module loading is unpredictable unless you specify dependencies (TODO this
% should probably be improved to separate "dependency" from "order", like
% systemd does it).
\ProvideDocumentCommand{\brt@mod@process}{}{
    \typeout{Processing modules...}
    \ProcessKeyvalOptions*
    \pgfkeys{/brt/modules/enabled}
    \typeout{Modules processed.}
} %%}

% CORE PACKAGES AND COMMANDS %%{1

% Programming.
\RequirePackage{xparse}

% Standard maths library.
\RequirePackage{amsmath, amssymb, amsthm}
\RequirePackage{mathtools}
% This is the single most useful package.
\RequirePackage{physics}

% Fonts.
\RequirePackage{mathrsfs}
\RequirePackage{stmaryrd}
\RequirePackage{dsfont}
\RequirePackage{bm}

% A reasonable quotation interface.
\RequirePackage{csquotes}

% brt@thisIfThat %%{
% Expand ##1 if ##2 is not empty.
\DeclareRobustCommand{\brt@thisIfThat}[2]{%%
    \ifthenelse{\equal{#2}{}}{}{#1}%%
}
%%}

% brtReloadHeader %%{
% Run this anywhere to reset header after possible disruption.
% TODO: find source (some stackoverflow) and understand what's happening
\ifcsname f@nch@setoffs\endcsname\else
    \let\f@nch@setoffs\fancy@setoffs
\fi
\DeclareRobustCommand{\brtReloadHeader}{\f@nch@setoffs}
%%}

% MODULES %%{1

% \brt@mod@declare{all}[%%{
% (In the current version, all is automatically populated, but that may change.)
%     default,%
%     page,%
%     units,%
%     parskip,%
%     graphics,%
%     chemistry,
% ]{}%%}

\brt@mod@declare{default}[%%{
    lists,%
    links,%
    breaklessmaths,%
    theorems,%
    shorthand%
][true]{}%%}

\brt@mod@declare{page}[%%{
    pagestyle,%
    fullpage%
]{}%%}

\brt@mod@declare{lists}{%%{
    \RequirePackage{enumerate}
}%%}

\brt@mod@declare{units}{%%{
    \RequirePackage[load=accepted,load=prefixed,load=abbr]{siunitx}
}%%}

\brt@mod@declare{microtype}{%%{
    \RequirePackage{microtype}
}%%}

\brt@mod@declare{pagestyle}[datetime]{%%{
    \RequirePackage{fancyhdr}
    \RequirePackage{lastpage}
    \RequirePackage{setspace}

    \ProvideDocumentCommand{\brtTopic}{m}{%%
        \DeclareRobustCommand{\@brt@topic}{##1}%%
    }
    \ProvideDocumentCommand{\brtSubtitle}{m}{%%
        \DeclareRobustCommand{\@brt@subtitle}{##1}%%
    }
    \ProvideDocumentCommand{\brtShorttitle}{m}{%%
        \DeclareRobustCommand{\@brt@shorttitle}{##1}%%
    }
    \ProvideDocumentCommand{\brtContributors}{m}{%%
        \DeclareRobustCommand{\@brt@contributors}{##1}%%
    }

    % TODO: There's an issue here where if some of these options are empty then
    % line breaking errors out because "there's nothing to break".
    \title{}
    \author{Sample Author}
    \date{\today}
    \newcommand{\@brt@topic}{}
    \newcommand{\@brt@subtitle}{}
    \newcommand{\@brt@shorttitle}{}
    \newcommand{\@brt@contributors}{}

    \providecommand{\brtPageOfWord}{of}

    \newlength{\brt@rulewidth}
    \setlength{\brt@rulewidth}{0.8pt}

    \DeclareRobustCommand{\brt@setFrameGeometry}{
        \setlength{\headheight}{15.2pt}
        \setlength{\headsep}{0.1in}
        \renewcommand{\headrulewidth}{\brt@rulewidth}
        \renewcommand{\footrulewidth}{\brt@rulewidth}
    }

    % Default page style.
    \fancypagestyle{brtStylePlain}{
        \brt@setFrameGeometry

        \fancyhf{}
        \fancyhead[C]{\@title}
        \fancyhead[R]{\@author}
        \fancyfoot[L]{\@brt@topic}
        \fancyfoot[C]{\@date}
        \fancyfoot[R]{\thepage\ \brtPageOfWord\ \pageref{LastPage}}
    }

    % Page style for title page (no other content).
    \fancypagestyle{brtStyleTitlePage}{
        \brt@setFrameGeometry
        \renewcommand{\headrulewidth}{0pt}
        \renewcommand{\footrulewidth}{0pt}
        \fancyhf{}
        \fancyfoot[C]{\@date}
    }

    % Page style for page that has title and maybe other content.
    \fancypagestyle{brtStyleTitlePageWithContent}{
        \brt@setFrameGeometry
        \renewcommand{\headrulewidth}{0pt}
        \fancyhf{}
        \fancyfoot[C]{\@date}
        \fancyfoot[R]{\thepage\ \brtPageOfWord\ \pageref{LastPage}}
    }

    % brtMakeTitleText
    % Print the title text without external typesetting like headers, etc.
    \ProvideDocumentCommand{\brtMakeTitleText}{}{%%
        \begin{doublespace}
            \begin{center}%%
                \LARGE%%
                \@title%%
                \Large%%
                \brt@thisIfThat{\\\@brt@subtitle}{\@brt@subtitle}%%
                \large%%
                \\\@author%%
                \brt@thisIfThat{\\\@brt@contributors}{\@brt@contributors}%%
                \normalsize%%
                \\\@brt@topic%%
            \end{center}%%
        \end{doublespace}%%
    }

    % brtMakeTitlePage
    % Create a new page, put the title on it, and fix headers for title page.
    \ProvideDocumentCommand{\brtMakeTitlePage}{}{%%
        \thispagestyle{brtStyleTitlePage}
        \newpage{}%%
        \vspace*{3in}%%
        \brtMakeTitleText{}%%
    }

    % brtMakeTitle
    % Print the title on a page with possible other content, but change headers
    % accordingly.
    \ProvideDocumentCommand{\brtMakeTitle}{}{%%
        \thispagestyle{brtStyleTitlePageWithContent}
        \brtMakeTitleText{}%%
    }

    \AtBeginDocument{\pagestyle{brtStylePlain}}
}%%}

\brt@mod@declare{fullpage}{%%{
    \RequirePackage{fullpage}
}%%}

\brt@mod@declare{bottomfoot}{%%{
    \RequirePackage[bottom]{footmisc} % Fixes footnote position.
}%%}

\brt@mod@declare{parskip}[bottomfoot]{%%{
    \RequirePackage{parskip}
}%%}

\brt@mod@declare{datetime}{%%{
    \RequirePackage{datetime2}
    \DTMusemodule{english}{en-NZ}
    \DTMsetstyle{en-NZ}
}%%}

\brt@mod@declare{colours}{%%{
    \RequirePackage{xcolor}
    \definecolor{blueish}{rgb}{0.0,0.1,0.4}
    \definecolor{greenish}{rgb}{0.0,0.4,0.0}
}%%}

\brt@mod@declare{links}[colours]{%%{
    \RequirePackage{varioref}
    \RequirePackage{hyperref}
    \RequirePackage[nameinlink]{cleveref}
    \ExecuteOptions{colours}
    \hypersetup{
        pdfencoding=auto,
        psdextra,
        linktocpage,
        colorlinks=true,
        linkcolor=blueish,
        citecolor=greenish
    }

    % brtLinkFootnote{url}{text} %%{
    % Create a link to 'url' displayed as 'text' and with a footnote that
    % displays the actual url.
    %
    % We use href's '\hyper@normalise' to (hopefully) take care of escaping
    % arbitrary characters in the url, so that the user should not have to
    % escape them manually. It is important that the url is the first argument,
    % though with some more effort it's probably possible to work around that
    % limitation. See [^1].
    \newcommand{\brt@linkFootnote}[2]{\href{##1}{##2}\footnote{\url{##1}}}
    \DeclareRobustCommand{\brtLinkFootnote}{\hyper@normalise\brt@linkFootnote}
    %%}
}%%}

\brt@mod@declare{breaklessmaths}{%%{
    % Never ever break in maths mode.
    % TODO test, this might need to go into the begin hook
    \binoppenalty=\maxdimen
    \relpenalty=\maxdimen
    \sloppy
}%%}

\brt@mod@declare{theorems}{%%{
    % TODO reimplemenet configurable environment titles
    % TODO fancy sub-proof proof

    % All theorem counters, by default, are within the `theorem` counter, which is
    % within `section`. To change counter dependency, use `\counterwithin` and
    % friends.

    \DeclareRobustCommand{\@brtProblemTitle}{Problem}

    \theoremstyle{plain}
    \newtheorem{theorem}{Theorem}[section]
    \newtheorem*{theorem*}{Theorem}
    \newtheorem{postulate}[theorem]{Postulate}
    \newtheorem{proposition}[theorem]{Proposition}
    \newtheorem*{proposition*}{Proposition}
    \newtheorem{lemma}[theorem]{Lemma}
    \newtheorem*{lemma*}{Lemma}
    \newtheorem{fact}[theorem]{Fact}
    \newtheorem*{fact*}{Fact}
    \newtheorem{claim}[theorem]{Claim}
    \newtheorem*{claim*}{Claim}
    \newtheorem{corollary}[theorem]{Corollary}
    \newtheorem*{corollary*}{Corollary}
    \newtheorem{problem}{\@brtProblemTitle}
    \newtheorem{subproblem}{Part}[problem]
    \newtheorem*{problem*}{\@brtProblemTitle}
    \newtheorem{want}[theorem]{Want}
    \newtheorem*{want*}{Want}

    \theoremstyle{definition}
    \newtheorem{definition}[theorem]{Definition}
    \newtheorem*{definition*}{Definition}
    \newtheorem{example}[theorem]{Example}
    \newtheorem{remark}[theorem]{Remark}
    \newtheorem*{remark*}{Remark}
    \newtheorem{axiom}[theorem]{Axiom}
    \newtheorem*{axiom*}{Axiom}

    % TODO This is absolutely terrible. Hard-coded recursion. Disgusting. But
    % thanks to TeX's brilliance, more efficient to do this than literally
    % anything else. Anyway what we should really do is have a single definition
    % that increments a counter every time we descend into another proof, and
    % then dispatch off of that. We'll need an array of qed symbols or
    % something similar for that to work.
    \NewCommandCopy{\proofBasic}{\proof}
    \NewCommandCopy{\endproofBasic}{\endproof}
    \newenvironment{proofC}[1][Proof]{%
        \begin{proofBasic}[##1]%
        \renewcommand{\qedsymbol}{\(\blacksquare\)}%
    }{%
        \end{proofBasic}%
    }
    \newenvironment{proofB}[1][Proof]{%
        \begin{proofBasic}[##1]%
        \let\proof\relax
        \let\endproof\relax
        \NewCommandCopy{\proof}{\proofC}
        \NewCommandCopy{\endproof}{\endproofC}
        \renewcommand{\qedsymbol}{\(\boxtimes\)}%
    }{%
        \end{proofBasic}%
    }
    \newenvironment{proofA}[1][Proof]{%
        \begin{proofBasic}[##1]%
        \let\proof\relax
        \let\endproof\relax
        \NewCommandCopy{\proof}{\proofB}
        \NewCommandCopy{\endproof}{\endproofB}
    }{%
        \end{proofBasic}%
    }
    \let\proof\relax
    \let\endproof\relax
    \NewCommandCopy{\proof}{\proofA}
    \NewCommandCopy{\endproof}{\endproofA}

    \AtBeginDocument{
        \theoremstyle{plain}
    }
}%%}

\brt@mod@declare{shorthand}{%%{
    % TODO make these commands optionally accept an argument and intelligently
    % determine whether brackets are needed.
    \ProvideDocumentCommand{\brtMaOperator}{m}{%%
        \mathsf{##1}%%
    }
    \ProvideDocumentCommand{\brtMaType}{m}{%%
        \textnormal{\textsf{\textbf{##1}}}%%
    }
    \ProvideDocumentCommand{\brtMaStatement}{m}{%%
        \textnormal{\texttt{\textbf{##1}}}%%
    }
    \ProvideDocumentCommand{\brtMaStructure}{m}{%%
        \mathbb{##1}%%
    }

    \NewCommandCopy{\category}{\brtMaType}

    % For when you define a new term.
    % TODO Eventually we should make this collect terms for an index (I believe
    % there's an issue where tectonic doesn't currently support indexes).
    \providecommand{\defn}[1]{\textbf{##1}}

    % When you want only one number for multi-line equation block.
    \providecommand{\nn}{\nonumber}

    \NewCommandCopy{\epsilonOld}{\epsilon}
    \NewCommandCopy{\varepsilonOld}{\varepsilon}
    \RenewCommandCopy{\epsilon}{\varepsilonOld}
    \RenewCommandCopy{\varepsilon}{\epsilonOld}

    \NewCommandCopy{\phiOld}{\phi}
    \NewCommandCopy{\varphiOld}{\varphi}
    \RenewCommandCopy{\phi}{\varphiOld}
    \RenewCommandCopy{\varphi}{\phiOld}

    \NewCommandCopy{\barOld}{\bar}
    \RenewCommandCopy{\bar}{\overline}

    \NewCommandCopy{\tildeOld}{\tilde}
    \RenewCommandCopy{\tilde}{\widetilde}

    \NewCommandCopy{\leqOld}{\leq}
    \RenewCommandCopy{\leq}{\leqslant}
    \NewCommandCopy{\geqOld}{\geq}
    \RenewCommandCopy{\geq}{\geqslant}

    \providecommand{\powerset}{\mathcal{P}}

    \DeclareDocumentCommand{\C}{}{\brtMaStructure{C}}
    \providecommand{\N}{\brtMaStructure{N}}
    \providecommand{\Q}{\brtMaStructure{Q}}
    \providecommand{\R}{\brtMaStructure{R}}
    \providecommand{\Z}{\brtMaStructure{Z}}

    % TODO i think there's a more idiomatic way of defining surroundings
    \providecommand{\buildset}[2]{\qty{\midqty{##1}{##2}}}
    \providecommand{\ceil}[1]{\left\lceil##1\right\rceil}
    \providecommand{\dummycdot}{\,\cdot\,}
    \providecommand{\floor}[1]{\left\lfloor##1\right\rfloor}
    \providecommand{\midqty}[2]{\left.##1\ \middle\vert\ ##2\right.}
    \providecommand{\modqty}[2]{\left.##1\middle/##2\right.}

    \providecommand{\1}{\mathds{1}}
    \providecommand{\codom}{\brtMaOperator{codom}}
    \providecommand{\coker}{\brtMaOperator{coker}}
    \providecommand{\diam}{\brtMaOperator{diam}}
    \providecommand{\dist}{\brtMaOperator{dist}}
    \providecommand{\dom}{\brtMaOperator{dom}}
    \providecommand{\image}{\brtMaOperator{image}}
    \providecommand{\ker}{\brtMaOperator{ker}}
    \providecommand{\proj}{\brtMaOperator{proj}}
    \providecommand{\ran}{\brtMaOperator{ran}}
    \providecommand{\sgn}{\brtMaOperator{sgn}}
}%%}

\brt@mod@declare{graphics}{%%{
    \RequirePackage{graphicx}
}%%}

\brt@mod@declare{chemistry}{%%{
    \RequirePackage[version=4]{mhchem}
}%%}

% PROCESS MODULES %%{1

\brt@mod@process

% NOTES %%{1

% [^1]: https://tex.stackexchange.com/questions/12855/getting-those-signs-in-the-footnote


% We deviate from the default 'foldmarker' because it is not uncommon to have
% three curly brackets in a row in TeX.
% vim:ft=tex:fdm=marker:fmr=%%{,%%}:fen:tw=80:et:ts=4:sts=4:sw=0:
