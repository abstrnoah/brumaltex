% Repository: <https://github.com/abstrnoah/brumaltex>
% Author: abstrnoah@
% License: MIT <https://github.com/abstrnoah/brumaltex/blob/master/LICENSE>

\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{brumaltex3}[2024/10/20]

% This is the latest version on tectonic, and seems sufficient for us.
\RequirePackage{expl3}[2022-02-24]

\ProvidesExplPackage{brumaltex3}{2024-10-20}{}{}

% This is the latest version on tectonic, and seems sufficient for us.
\RequirePackage{xparse}[2022-01-12]

% List of all modules declared, in left-right order of declaration.
% We refrain implementing this via the dependency feature (tempting as it may
% be) to simplify the guarantee "modules load in order of declaration".
\seq_new:N \g__brt_modules_seq

\msg_new:nnn {brumaltex3} {brtModuleLoadInfo}
    {Loading~requested~module:~#1}
\cs_new:Npn \__brt_module_load_info:nn
    {\msg_info:nnn {brumaltex3} {brtModuleLoadInfo}}

% Request that a module be loaded at load-time.
% Do not call this within module code (use requires= option instead).
\cs_new:Nn \brt_request_module:n % {module name}
    {% This function is purposely non-recursive so as to help avoid cycles.
     % Dependencies are already made transitive at declaration time.
     \keys_set:nn {brumaltex3 / #1} {requested}
     \clist_map_inline:cn {g__brt_module_ #1 _reqs_clist}
        {\keys_set:nn {brumaltex3 / ##1} {requested}}}

% Declare a new module.
% Modules will be loaded in the order declared.
% Supported module options:
%   requires = <comma list of dependencies>
% Behaviour is only defined if this command is called before \brt_load_modules:.
% Behaviour is only defined when dependencies are declared before their
% dependents.
\cs_new:Nn \brt_declare_module:nnn % {name} {options} {code}
    {\seq_gput_right:Nn \g__brt_modules_seq {#1}
     % initialised as false
     \bool_new:c {g__brt_module_ #1 _requested_bool}
     \bool_new:c {g__brt_module_ #1 _loaded_bool}
     \keys_define:nn {brumaltex3 / #1}
        {requested .code:n = \bool_gset_true:c {g__brt_module_ #1 _requested_bool},
         requested .value_forbidden:n = true,
         % The code is stored in a token list to avoid parameter doubling.
         code .tl_gset:c = {g__brt_module_ #1 _code_tl},
         code .value_required:n = true,
         % List of dependencies.
         requires .clist_gset:c = {g__brt_module_ #1 _reqs_clist}}
     \keys_set:nn {brumaltex3 / #1} {code = {#3}}
     \keys_set:nn {brumaltex3 / #1} {#2}
     % make dependencies transitive
     \clist_map_inline:cn {g__brt_module_ #1 _reqs_clist}
        {\clist_gconcat:ccc
            {g__brt_module_ #1 _reqs_clist}
            {g__brt_module_ ##1 _reqs_clist}
            {g__brt_module_ #1 _reqs_clist}}
     \cs_new:cn {__brt_module_ #1 _code:}
        {\exp_not:n {\bool_if:cTF {g__brt_module_ #1 _loaded_bool}}
            {% do nothing if already loaded
             }
            {\bool_gset_true:c {g__brt_module_ #1 _loaded_bool}
             \tl_use:c {g__brt_module_ #1 _code_tl}}}
     \DeclareOption {#1} {\brt_request_module:n {#1}}}

% Process the options passed to the package and then load the requested modules.
% Modules are loaded in the order declared.
% Modules are never loaded more than once.
% Behaviour is undefined if this command is called more than once.
\cs_new:Nn \brt_load_modules:
    {\ProcessOptions\relax
     \seq_map_inline:Nn \g__brt_modules_seq
        {\bool_if:cTF {g__brt_module_ ##1 _requested_bool}
            {\__brt_module_load_info:nn {##1}
             \use:c {__brt_module_ ##1 _code:}}
            {% do nothing if module was not requested
             }}}

% This module is requested by default, so no need to declare as a dependency.
\brt_declare_module:nnn {core-external-dependencies} {} {
    \RequirePackage{amsmath}
    \RequirePackage{amssymb}
    \RequirePackage{amsthm}
    \RequirePackage{mathtools}
    \RequirePackage{physics}
    \RequirePackage{csquotes}
    \RequirePackage{mathrsfs}
    \RequirePackage{stmaryrd}
    \RequirePackage{dsfont}
    \RequirePackage{bm}
}

\brt_declare_module:nnn {expl3-library} {} {
    % A small library of functions built on top of expl3.

    % Names follow expl3 conventions unless we are creating a variant of an
    % existing command that doesn't.

    \exp_args_generate:n {NNno, NNNo, Nne, no}

    \cs_generate_variant:Nn \cs_to_str:N {c}

    \cs_generate_variant:Nn \seq_gset_from_clist:Nn {No}

    % #1 = object being indexed; #2 = index
    \msg_new:nnn {brumaltex3} {brtIndexError} {Index~out~of~bounds:~#1~[#2]}
    \cs_new:Nn \__brt_index_error:nn
        {\msg_error:nnnn {brumaltex3} {brtIndexError} {#1} {#2}}
    \cs_generate_variant:Nn \__brt_index_error:nn {ee}

    % Call an anonymous function on one argument.
    \cs_new:Nn \brt_anon:nn % {argument} {function}
        {\cs_set:Nn \__brt_anon_cs:n {#2}
         \__brt_anon_cs:n {#1}}

    % Call an anonymous function on two arguments.
    \cs_new:Nn \brt_anon:nnn % {argument} {argument} {function}
        {\cs_set:Nnn \__brt_anon_cs:nn {#3}
         \__brt_anon_cs:nn {#1} {#2}}

    \newcommand \brtAnon {\brt_anon:nn}

    \cs_gset:Npn \NewCommandCopy:cc {\exp_args:Ncc \NewCommandCopy}
    \cs_gset:Npn \NewCommandCopy:cn {\exp_args:Nc \NewCommandCopy}

    % Copy the second environment into the first.
    % This is the only approach I've found that reliably copies environments.
    \cs_new:Nn \brt_env_gset_eq:nn
        {\NewCommandCopy:cc {#1} {#2}
         \NewCommandCopy:cc {end#1} {end#2}}

    % Set #1 to #2, saving #1's original definition as #1Old
    \cs_new:Nn \brt_cs_gset_save_old:NN
        {\cs_gset_eq:cN {\cs_to_str:N #1 Old} #1
         \cs_gset_eq:NN #1 #2}

    % Swap the commands.
    \cs_new:Nn \brt_cs_gswap:NN
        {\cs_set_eq:NN \__tmp_cs #1
         \cs_gset_eq:NN #1 #2
         \cs_gset_eq:NN #2 \__tmp_cs}

    % Get an item from a sequence, issuing an error if out of bounds.
    \cs_new:Nn \brt_seq_item:Nn % seq {integer expression}
        {\bool_if:nTF % true iff out of bounds
            {\int_compare_p:nNn {#2} > {\seq_count:N #1}
             || \int_compare_p:nNn {#2} < {1}}
            {\__brt_index_error:ee
                {\exp_not:n {#1}~(length=\seq_count:N #1)}
                {#2=\int_use:N #2}}
            {\seq_item:Nn #1 {#2}}}
}

\brt_declare_module:nnn {latex3-issue1090-workaround} {} {
    % See <https://github.com/latex3/latex3/issues/1090>
    \cs_gset_protected:Npn \peek_analysis_map_inline:n #1
      {
        \group_align_safe_begin: % <-- added
        \int_gincr:N \g__kernel_prg_map_int
        \cs_set_protected:cpn
          { __tl_analysis_map_ \int_use:N \g__kernel_prg_map_int :nnN }
          ##1##2##3
          {
            \group_end:
            #1
            \__tl_peek_analysis_loop:NNn
              \prg_break_point:Nn \peek_analysis_map_break: { \group_align_safe_end: } % <-- added
          }
        \__tl_peek_analysis_loop:NNn ? ? ?
      }
}

\brt_declare_module:nnn {ref} {} {
    \RequirePackage{hyperref}
    \RequirePackage[nameinlink]{cleveref}
}

\brt_declare_module:nnn {biblatex} {} {
    \RequirePackage
        [backend = bibtex,
         style = alphabetic,
         url = false,
         maxbibnames = 4]
        {biblatex}
    % The user should use \addbibresource after loading this module.
}

\brt_declare_module:nnn {biblatex-draft} {} {
    \providecommand \addbibresource [1] {}
    \providecommand \printbibliography {}
    \RenewDocumentCommand \cite {o m}
        {\IfValueTF {#1}
            {[#2 ; ~ #1]}
            {[#2]}}
}

\brt_declare_module:nnn {environments} {} {
    \theoremstyle {plain}
    \newtheorem {theorem} {Theorem} [section]
    \newtheorem* {theorem*} {Theorem}
    \newtheorem {proposition} [theorem] {Proposition}
    \newtheorem* {proposition*} {Proposition}
    \newtheorem {lemma} [theorem] {Lemma}
    \newtheorem* {lemma*} {Lemma}
    \newtheorem {fact} [theorem] {Fact}
    \newtheorem* {fact*} {Fact}
    \newtheorem {claim} [theorem] {Claim}
    \newtheorem* {claim*} {Claim}
    \newtheorem {corollary} [theorem] {Corollary}
    \newtheorem* {corollary*} {Corollary}
    \newtheorem {observation} [theorem] {Observation}
    % TODO improve problem and problempart
    \newtheorem {problem} {Problem}
    \newtheorem* {problem*} {Problem}
    \newtheorem {problempart} {Part} [problem]
    \newtheorem* {problempart*} {Part}
    \newtheorem* {problemparts*} {Parts}
    \newtheorem {exercise} {Exercise}
    \newtheorem* {exercise*} {Exercise}
    \newtheorem {exercisepart} {Part} [exercise]

    \theoremstyle {definition}
    \newtheorem* {definition} {Definition}
    \newtheorem {remark} [theorem] {Remark}
    \newtheorem* {remark*} {Remark}
    \newtheorem* {notation*} {Notation}
    \newtheorem {question} {Question}
    \newtheorem {conjecture} {Conjecture}

    \NewDocumentEnvironment {solution} {O{Solution}}
        {\begin{proof}[#1]}
        {\end{proof}}
    \NewDocumentEnvironment {proofpart} {m}
        {\begin{proof}[\underline{#1}]}
        {\end{proof}}

    \AtEndOfPackage {
        \theoremstyle {plain}
    }

    \NewDocumentEnvironment {scope} {} {} {}
}

\brt_declare_module:nnn {nestedproofs} {requires = expl3-library} {
    \brt_env_gset_eq:nn {proofOld} {proof}
    \int_new:N \g__brt_proof_nesting_level_int
    \seq_new:N \g__brt_proof_qeds_seq

    % \brtQedsSet {#1=comma-delimited list of qed symbols} -> void
    % Set the QED symbols for nested proofs.
    % The left-most symbol is used for the top-level proof whilst the right-most
    % symbol is used for the deepest level proofs.
    \NewDocumentCommand \brtQedsSet {m}
        {\seq_gset_from_clist:Nn \g__brt_proof_qeds_seq {#1}}

    \cs_new:Nn \__brt_renew_qed:n
        {\renewcommand \qedsymbol {#1}}

    \RenewDocumentEnvironment {proof} {O{Proof}}
        {% outer-most qed will be index 1
         \int_gincr:N \g__brt_proof_nesting_level_int
         \begin{proofOld}[#1]
         \__brt_renew_qed:n
             {\brt_seq_item:Nn \g__brt_proof_qeds_seq
                 {\g__brt_proof_nesting_level_int}}}
        {\end{proofOld}
         \int_gdecr:N \g__brt_proof_nesting_level_int}

    % Default qed symbols.
    \newcommand \brtDefaultQeds
        {\(\blacksquare\),
         \(\boxtimes\),
         \(\square\),
         \(\checkmark\)}
    \seq_gset_from_clist:No \g__brt_proof_qeds_seq {\brtDefaultQeds}
}

\brt_declare_module:nnn {experiments} {requires = expl3-library} {
    % \brt_token_in_tl:nNTF {tl} \token {true code} {false code}
    \cs_new:Nn \brt_token_in_tl:nNTF
        {\__brt_token_in_tl_worker:NTFN #2 {#3} {#4} #1 \q_recursion_tail
         \q_recursion_stop}
    \cs_new:Nn \__brt_token_in_tl_worker:NTFN
        {\quark_if_recursion_tail_stop_do:Nn #4 {#3}
         \token_if_eq_meaning:NNTF #4 #1
            {#2 \use_none_delimit_by_q_recursion_stop:w}
            {\__brt_token_in_tl_worker:NTFN #1 {#2} {#3}}}
    \cs_generate_variant:Nn \brt_token_in_tl:nNTF {v}
}

\brt_declare_module:nnn {composition} {requires = expl3-library} {

    % \brt_comp_nn_nn:NNN \csA \csB {rule}
    % Redefine \csA to behave like rule when composed with \csB.
    % \csA and \csB are function of signature :nn.
    % Where rule is an anonymous function of one argument.
    % You must define \csA first, without using this function.
    % You may declare multiple compositions for \csA, but at most one per \csB.
    % E.g. `\brt_comp_nn_nn:NNN \forall \exists {\forall #1 \, \exists}`
    % behaves like `\forall x \exists y -> \forall x \, \exists y`.
    \cs_new:Nn \brt_comp_nn_nn:NNn
        {\cs_if_free:cT {__brt__ \cs_to_str:N #1 __base}
            {\cs_gset_eq:cN {__brt__ \cs_to_str:N #1 __base} #1
             \seq_new:c {__brt__ \cs_to_str:N #1 __composables_seq}
             \cs_gset:Npn #1 ##1##2
                {\seq_if_in:cnTF {__brt__ \cs_to_str:N #1 __composables_seq}
                    {##2}
                    {\use:c {__brt__ \cs_to_str:N #1 __ \cs_to_str:N ##2 __rule :n} {##1}}
                    {\use:c {__brt__ \cs_to_str:N #1 __base} {##1} {##2}}}}
         \cs_new:cn {__brt__ \cs_to_str:N #1 __ \cs_to_str:N #2 __rule :n} {#3}
         \seq_gput_right:cn {__brt__ \cs_to_str:N #1 __composables_seq} {#2}}

    % \brt_comp_quantifiers:NNnn \Forall \Exists \forall \exists
    % Make a pair of quantifiers composable.
    \cs_new:Nn \brt_comp_quantifiers:NNnn
        {\brt_comp_nn_nn:NNn #1 #1 {#3 ##1 \, #1}
         \brt_comp_nn_nn:NNn #1 #2 {#3 ##1 \, #2}
         \brt_comp_nn_nn:NNn #2 #2 {#4 ##1 \, #2}
         \brt_comp_nn_nn:NNn #2 #1 {#4 ##1 \, #1}}

}

\brt_declare_module:nnn {composition-unwrap-ii} {requires = composition} {
    \cs_gset_eq:NN \__brt_comp_nn_nn_worker:NNn \brt_comp_nn_nn:NNn
    \tl_new:N \l_head_tl
    \cs_gset:Nn \brt_comp_nn_nn:NNn
        {\__brt_comp_nn_nn_worker:NNn #1 #2 {#3}
         \cs_if_free:cT {__brt__ \cs_to_str:N #1 __composer:nn}
            {\cs_gset_eq:cN {__brt__ \cs_to_str:N #1 __composer:nn} #1
             \cs_gset:Npn #1 ##1##2
                {\exp_args:NNo \tl_set:No \l_head_tl {\tl_head:n {##2}}
                 \seq_if_in:cVTF {__brt__ \cs_to_str:N #1 __composables_seq}
                    \l_head_tl
                    {\use:c {__brt__ \cs_to_str:N #1 __composer:nn} {##1} ##2}
                    {\use:c {__brt__ \cs_to_str:N #1 __composer:nn} {##1} {##2}}}}}
}

\brt_declare_module:nnn {longhand} {requires = {expl3-library,composition}} {
    % Useful macros for document authors that have long names prefixed by
    % `\brtLH...` which can be bound to the author's custom shorthands.
    % Although I try to tailor this module to a general audience, it undoubtably
    % makes opinionated choices about mathematical notation.

    \RequirePackage{xspace}

    % Text mode

    % TODO Build an index of terms defined by \brtLHDefine.
    \newcommand \brtLHDefine {\textbf}
    \newcommand \brtLHPredefine {\emph}

    % Maths mode

    % Needed inside of ExplSyntax.
    \newcommand \brtLHMaSubscript [2] {#1 \c_math_subscript_token {#2}}

    \newcommand \brtLHOperatorFmt [1] {\textsf {\upshape #1}}

    \newcommand \brtLHStatementFmt [1] {\texttt {\upshape #1}}

    % TODO experimental
    % \brtLHOpCons {csname} {symbol} {operation}
    \NewDocumentCommand \brtLHOpCons {mmm}
        {\DeclareDocumentCommand {#1} {d()}
            {\IfValueTF {##1}
                {#3}
                {#2}}}

    % \brtLHOperatorCons {csname} {symbol}
    \NewDocumentCommand \brtLHOperatorCons {mm}
        {\NewDocumentCommand {#1} {d() g}
            {\brtLHOperatorFmt {#2}
             \IfValueT {##1} {\qty(##1)}
             \IfValueT {##2} {\qty(##2)}}}

    % \brtLHStatementCons {csname} {symbol}
    \NewDocumentCommand \brtLHStatementCons {mm}
        {\NewDocumentCommand {#1} {d() g}
            {\brtLHStatementFmt {#2}
             \IfValueT {##1} {\qty(##1)}
             \IfValueT {##2} {\qty(##2)}
             \xspace}}

    \newcommand \brtLHProjectSymbol {\brtLHOperatorFmt {proj}}
    \newcommand \brtLHRestrictSymbol {\brtLHOperatorFmt {res}}

    \brtLHOperatorCons \brtLHDomainOp {dom}
    \brtLHOperatorCons \brtLHCodomainOp {cod}
    \brtLHOperatorCons \brtLHKernelOp {ker}
    \brtLHOperatorCons \brtLHCokernelOp {coker}
    \brtLHOperatorCons \brtLHImageOp {image}
    \brtLHOperatorCons \brtLHRangeOp {ran}
    \brtLHOperatorCons \brtLHLimitOp {lim}
    \brtLHOperatorCons \brtLHColimitOp {colim}
    \brtLHOperatorCons \brtLHDegreeOp {deg}
    \brtLHOperatorCons \brtLHSignOp {sgn}
    \brtLHOperatorCons \brtLHLengthOp {length}
    \brtLHOperatorCons \brtLHRankOp {rank}

    \brtLHOperatorCons \brtLHMinimum {min}
    \brtLHOperatorCons \brtLHMaximum {max}
    \brtLHOperatorCons \brtLHInfimum {inf}
    \brtLHOperatorCons \brtLHSupremum {sup}

    \newcommand \brtLHImageSet [2] {#1 \qty[#2]}
    \newcommand \brtLHInverseMap [1] {{#1}^{-1}}
    \newcommand \brtLHInverseSet [2] {\brtLHInverseMap {#1} \qty[#2]}

    \newcommand \brtLHCartesianPower [2] {{}^{#2}{#1}}

    \newcommand \brtLHRestrict [2] {#1 \restriction #2}

    \newcommand \brtLHMidQty [2] {\left.#1\ \middle\vert\ #2\right.}
    \newcommand \brtLHDivQty [2] {\left.#1\middle/#2\right.}

    % \brtLHSetCons {element expression} {set specification}
    \newcommand \brtLHSetCons [2] {\qty{\brtLHMidQty {#1} {#2}}}

    % \brtLHFamilyCons {output expression} {input expression}
    \newcommand \brtLHFamilyCons [2] {\brtLHMaSubscript {\qty(#1)} {#2}}

    \newcommand \brtLHExistsUniqueSymbol {\exists!}

    % \brtLHForall {input} {output}
    \newcommand \brtLHForall [2] {\forall #1 \, \qty(#2)}
    % \brtLHExists {input} {output}
    \newcommand \brtLHExists [2] {\exists #1 \, \qty(#2)}
    \brt_comp_quantifiers:NNnn \brtLHForall \brtLHExists {\forall} {\exists}

    % \brtLHIndexedFamily {index} {input expression} {output expression}
    \NewDocumentCommand \brtLHIndexedFamily {mmm}
        {\brtLHFamilyCons
            {\brt_anon:nn {#1} {#2}}
            {\brt_anon:nn {#1} {#3}}}

    % \brtLHIndexedSet {index} {element expression} {set specification}
    \ProvideDocumentCommand \brtLHIndexedSet {mmm}
        {\brtLHSetCons
            {\brt_anon:nn {#1} {#3}}
            {\brt_anon:nn {#1} {#2}}}

    \newcommand \brtLHFrom {\leftarrow}
    \newcommand \brtLHLogicalCoimplies {\Leftarrow}
    \newcommand \brtLHLogicalImplies {\Rightarrow}
    \newcommand \brtLHLogicalIff {\Leftrightarrow}

    \newcommand \brtLHDummyCdot {\,\cdot\,}
    \newcommand \brtLHAnonParamSymbol {\bullet}

    \newcommand \brtLHSeqConcatSymbol {{}^\frown}
    \newcommand \brtLHSeqConcatPower [2] {#1 ^ {(\brtLHSeqConcatSymbol #2)}}

    \newcommand \brtLHUnionSymbol {\bigcup}
    \newcommand \brtLHIntersectSymbol {\bigcap}
    \newcommand \brtLHCoproductSymbol {\bigsqcup}
    \newcommand \brtLHProductSymbol {\bigsqcap}
    \newcommand \brtLHTensorSymbol {\bigotimes}
}

\brt_declare_module:nnn {shorthand} {requires = {longhand,composition}} {
    % The package author's shorthands. Beware.

    % Text mode

    \cs_gset:Npn \define {\brtLHDefine}
    \cs_gset:Npn \predefine {\brtLHPredefine}

    % Maths mode

    % when you only want one number for a multi-line equation block
    \cs_gset:Npn \nn {\nonumber}

    \brt_cs_gswap:NN \epsilon \varepsilon
    \brt_cs_gswap:NN \phi \varphi
    \brt_cs_gset_save_old:NN \leq \leqslant
    \brt_cs_gset_save_old:NN \geq \geqslant
    \brt_cs_gset_save_old:NN \bar \overline

    \cs_gset:Npn \project {\brtLHProjectSymbol}
    \cs_gset:Npn \proj {\brtLHProjectSymbol}
    \cs_gset:Npn \restrict {\brtLHRestrictSymbol}
    \cs_gset:Npn \res {\brtLHRestrictSymbol}

    \cs_gset:Npn \domain {\brtLHDomainOp}
    \cs_gset:Npn \dom {\brtLHDomainOp}
    \cs_gset:Npn \codomin {\brtLHCodomainOp}
    \cs_gset:Npn \codom {\brtLHCodomainOp}
    \cs_gset:Npn \cod {\brtLHCodomainOp}
    \cs_gset:Npn \ker {\brtLHKernelOp}
    \cs_gset:Npn \coker {\brtLHCokernelOp}
    \cs_gset:Npn \image {\brtLHImageOp}
    \cs_gset:Npn \range {\brtLHRangeOp}
    \cs_gset:Npn \limit {\brtLHLimitOp}
    \cs_gset:Npn \lim {\brtLHLimitOp}
    \cs_gset:Npn \colimit {\brtLHColimitOp}
    \cs_gset:Npn \colim {\brtLHColimitOp}
    \cs_gset:Npn \deg {\brtLHDegreeOp}
    \cs_gset:Npn \sgn {\brtLHSignOp}
    \cs_gset:Npn \length {\brtLHLengthOp}
    \cs_gset:Npn \len {\brtLHLengthOp}
    \cs_gset:Npn \rank {\brtLHRankOp}
    \cs_gset:Npn \minimum {\brtLHMinimum}
    \cs_gset:Npn \min {\brtLHMinimum}
    \cs_gset:Npn \maximum {\brtLHMaximum}
    \cs_gset:Npn \max {\brtLHMaximum}
    \cs_gset:Npn \inf {\brtLHInfimum}
    \cs_gset:Npn \sup {\brtLHSupremum}

    \cs_gset:Npn \imageset {\brtLHImageSet}
    \cs_gset:Npn \inversemap {\brtLHInverseMap}
    \cs_gset:Npn \inverseset {\brtLHInverseSet}
    \cs_gset:Npn \preimagemap {\brtLHInverseMap}
    \cs_gset:Npn \preimageset {\brtLHInverseSet}

    \cs_gset:Npn \cartpow {\brtLHCartesianPower}

    \cs_gset:Npn \buildset {\brtLHSetCons}
    \cs_gset:Npn \buildfamily  {\brtLHFamilyCons}

    \cs_gset:Npn \quotient {\brtLHDivQty}

    \cs_gset:Npn \existsunique {\brtLHExistsUniqueSymbol}
    \cs_gset:Npn \Forall {\brtLHForall}
    \cs_gset:Npn \Exists {\brtLHExists}
    \brt_comp_quantifiers:NNnn \Forall \Exists {\forall} {\exists}

    \cs_gset:Npn \idxedset {\brtLHIndexedSet}
    \cs_gset:Npn \idxedfamily  {\brtLHIndexedFamily}

    \cs_gset:Npn \from {\brtLHFrom}
    \cs_gset:Npn \lcoimplies {\brtLHLogicalCoimplies}
    \cs_gset:Npn \limplies {\brtLHLogicalImplies}
    \cs_gset:Npn \liff {\brtLHLogicalIff}

    \cs_gset:Npn \dummycdot {\brtLHDummyCdot}

    \cs_gset:Npn \concat {\brtLHSeqConcatSymbol}
    \cs_gset:Npn \concatpow {\brtLHSeqConcatPower}

    \cs_gset:Npn \union {\brtLHUnionSymbol}
    \cs_gset:Npn \intersect {\brtLHIntersectSymbol}
    \cs_gset:Npn \coproduct {\brtLHCoproductSymbol}
    \cs_gset:Npn \product {\brtLHProductSymbol}
    \cs_gset:Npn \tensor {\brtLHProductSymbol}
}

\brt_declare_module:nnn {breaklessmaths} {} {
    % never ever break in maths mode
    \binoppenalty=\maxdimen
    \relpenalty=\maxdimen
    \sloppy
}

\brt_declare_module:nnn {sections} {} {
    \cs_gset_eq:NN \paragraphOld \paragraph
    \renewcommand \paragraph [1] {\paragraphOld {#1.}}
}

\brt_declare_module:nnn {fullpage} {} {
    \RequirePackage{geometry}
    \geometry{margin=1in}
}

% Process modules.
% (For some reason this cannot be put in a \AtEndOfPackage.)
\brt_request_module:n {core-external-dependencies}
\brt_load_modules:
