\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{brumaltex3}[2024/01/20]

% This is the latest version on tectonic, and seems sufficient for us.
\RequirePackage{expl3}[2022-02-24]

\ProvidesExplPackage{brumaltex3}{2024-01-20}{}{}

% This is the latest version on tectonic, and seems sufficient for us.
\RequirePackage{xparse}[2022-01-12]

% List of all modules declared, in left-right order of declaration.
% We refrain implementing this via the dependency feature (tempting as it may
% be) to simplify the guarantee "modules load in order of declaration".
\seq_new:N \g__brt_modules_seq

\msg_new:nnn {brumaltex3} {brtModuleLoadInfo}
    {Loading~requested~module:~#1}
\cs_new:Npn \__brt_module_load_info:nn
    {\msg_info:nnn {brumaltex3} {brtModuleLoadInfo}}

% Request that a module be loaded at load-time.
% Do not call this within module code (use requires= option instead).
\cs_new:Nn \brt_request_module:n % {module name}
    {% This function is purposely non-recursive so as to help avoid cycles.
     % Dependencies are already made transitive at declaration time.
     \keys_set:nn {brumaltex3 / #1} {requested}
     \clist_map_inline:cn {g__brt_module_ #1 _reqs_clist}
        {\keys_set:nn {brumaltex3 / ##1} {requested}}}

% Declare a new module.
% Modules will be loaded in the order declared.
% Supported module options:
%   requires = <comma list of dependencies>
% Behaviour is only defined if this command is called before \brt_load_modules:.
% Behaviour is only defined when dependencies are declared before their
% dependents.
\cs_new:Nn \brt_declare_module:nnn % {name} {options} {code}
    {\seq_gput_right:Nn \g__brt_modules_seq {#1}
     % initialised as false
     \bool_new:c {g__brt_module_ #1 _requested_bool}
     \bool_new:c {g__brt_module_ #1 _loaded_bool}
     \keys_define:nn {brumaltex3 / #1}
        {requested .code:n = \bool_gset_true:c {g__brt_module_ #1 _requested_bool},
         requested .value_forbidden:n = true,
         % The code is stored in a token list to avoid parameter doubling.
         code .tl_gset:c = {g__brt_module_ #1 _code_tl},
         code .value_required:n = true,
         % List of dependencies.
         requires .clist_gset:c = {g__brt_module_ #1 _reqs_clist}}
     \keys_set:nn {brumaltex3 / #1} {code = {#3}}
     \keys_set:nn {brumaltex3 / #1} {#2}
     % make dependencies transitive
     \clist_map_inline:cn {g__brt_module_ #1 _reqs_clist}
        {\clist_gconcat:ccc
            {g__brt_module_ #1 _reqs_clist}
            {g__brt_module_ ##1 _reqs_clist}
            {g__brt_module_ #1 _reqs_clist}}
     \cs_new:cn {__brt_module_ #1 _code:}
        {\exp_not:n {\bool_if:cTF {g__brt_module_ #1 _loaded_bool}}
            {% do nothing if already loaded
             }
            {\bool_gset_true:c {g__brt_module_ #1 _loaded_bool}
             \tl_use:c {g__brt_module_ #1 _code_tl}}}
     \DeclareOption {#1} {\brt_request_module:n {#1}}}

% Process the options passed to the package and then load the requested modules.
% Modules are loaded in the order declared.
% Modules are never loaded more than once.
% Behaviour is undefined if this command is called more than once.
\cs_new:Nn \brt_load_modules:
    {\ProcessOptions\relax
     \seq_map_inline:Nn \g__brt_modules_seq
        {\bool_if:cTF {g__brt_module_ ##1 _requested_bool}
            {\__brt_module_load_info:nn {##1}
             \use:c {__brt_module_ ##1 _code:}}
            {% do nothing if module was not requested
             }}}

% This module is requested by default, so no need to declare as a dependency.
\brt_declare_module:nnn {core-external-dependencies} {} {
    \RequirePackage{amsmath}
    \RequirePackage{amssymb}
    \RequirePackage{amsthm}
    \RequirePackage{mathtools}
    \RequirePackage{physics}
    \RequirePackage{csquotes}
    \RequirePackage{mathrsfs}
    \RequirePackage{stmaryrd}
    \RequirePackage{dsfont}
    \RequirePackage{bm}
}

\brt_declare_module:nnn {expl3-library} {} {
    % A small library of functions built on top of expl3.

    % Names follow expl3 conventions unless we are creating a variant of an
    % existing command that doesn't.

    % #1 = object being indexed; #2 = index
    \msg_new:nnn {brumaltex3} {brtIndexError} {Index~out~of~bounds:~#1~[#2]}
    \cs_new:Nn \__brt_index_error:nn
        {\msg_error:nnnn {brumaltex3} {brtIndexError} {#1} {#2}}

    % Call an anonymous function on one argument.
    \cs_new:Nn \brt_anon:nn % {argument} {function}
        {\cs_set:Nn \__brt_anon_cs:n {#2}
         \__brt_anon_cs:n {#1}}

    \newcommand \brtAnon {\brt_anon:nn}

    \cs_gset:Npn \NewCommandCopy:cc {\exp_args:Ncc \NewCommandCopy}
    \cs_gset:Npn \NewCommandCopy:cn {\exp_args:Nc \NewCommandCopy}

    % Copy the second environment into the first.
    % This is the only approach I've found that reliably copies environments.
    \cs_new:Nn \brt_env_gset_eq:nn
        {\NewCommandCopy:cc {#1} {#2}
         \NewCommandCopy:cc {end#1} {end#2}}

    % Set #1 to #2, saving #1's original definition as #1Old
    \cs_new:Nn \brt_cs_gset_save_old:NN
        {\cs_gset_eq:cN {\cs_to_str:N #1 Old} #1
         \cs_gset_eq:NN #1 #2}

    % Swap the commands.
    \cs_new:Nn \brt_cs_gswap:NN
        {\cs_set_eq:NN \__tmp_cs #1
         \cs_gset_eq:NN #1 #2
         \cs_gset_eq:NN #2 \__tmp_cs}

    % Get an item from a sequence, issuing an error if out of bounds.
    \cs_new:Nn \brt_seq_item:Nn % seq {integer expression}
        {\bool_if:nTF % true iff out of bounds
            {\int_compare_p:nNn {#2} > {\seq_count:N #1}
             || \int_compare_p:nNn {#2} < {1}}
            {\brt_index_error:nn {#1} {#2}}
            {\seq_item:Nn #1 {#2}}}
}

\brt_declare_module:nnn {breaklessmaths} {} {
    % never ever break in maths mode
    \binoppenalty=\maxdimen
    \relpenalty=\maxdimen
    \sloppy
}

\brt_declare_module:nnn {latex3-issue1090-workaround} {} {
    % See <https://github.com/latex3/latex3/issues/1090>
    \cs_gset_protected:Npn \peek_analysis_map_inline:n #1
      {
        \group_align_safe_begin: % <-- added
        \int_gincr:N \g__kernel_prg_map_int
        \cs_set_protected:cpn
          { __tl_analysis_map_ \int_use:N \g__kernel_prg_map_int :nnN }
          ##1##2##3
          {
            \group_end:
            #1
            \__tl_peek_analysis_loop:NNn
              \prg_break_point:Nn \peek_analysis_map_break: { \group_align_safe_end: } % <-- added
          }
        \__tl_peek_analysis_loop:NNn ? ? ?
      }
}

\brt_declare_module:nnn {ref} {} {
    \RequirePackage{hyperref}
    \RequirePackage[nameinlink]{cleveref}
}

\brt_declare_module:nnn {biblatex} {} {
    \RequirePackage
        [backend = bibtex,
         style = alphabetic,
         url = false,
         maxbibnames = 4]
        {biblatex}
    % The user should use \addbibresource after loading this module.
}

\brt_declare_module:nnn {environments} {} {
    \theoremstyle{plain}
    \newtheorem{theorem}{Theorem}[section]
    \newtheorem{proposition}[theorem]{Proposition}
    \newtheorem{lemma}[theorem]{Lemma}
    \newtheorem{fact}[theorem]{Fact}
    \newtheorem{claim}[theorem]{Claim}
    \newtheorem{corollary}[theorem]{Corollary}

    \theoremstyle{definition}
    \newtheorem*{definition}{Definition}
    \newtheorem{remark}[theorem]{Remark}
    \newtheorem*{remark*}{Remark}
    \newtheorem{question}{Question}
    \newtheorem{conjecture}{Conjecture}

    \AtEndOfPackage {
        \theoremstyle {plain}
    }
}

\brt_declare_module:nnn {nestedproofs} {requires = expl3-library} {
    \brt_env_gset_eq:nn {proofOld} {proof}
    \int_new:N \g__brt_proof_nesting_level_int
    \seq_new:N \g__brt_proof_qeds_seq

    % \brtQedsSet {#1=comma-delimited list of qed symbols} -> void
    % Set the QED symbols for nested proofs.
    % The left-most symbol is used for the top-level proof whilst the right-most
    % symbol is used for the deepest level proofs.
    \NewDocumentCommand \brtQedsSet {m}
        {\seq_gset_from_clist:Nn \g__brt_proof_qeds_seq {#1}}

    \cs_new:Nn \__brt_renew_qed:n
        {\renewcommand \qedsymbol {#1}}

    \RenewDocumentEnvironment {proof} {O{Proof}}
        {% outer-most qed will be index 1
         \int_gincr:N \g__brt_proof_nesting_level_int
         \begin{proofOld}[#1]
         \__brt_renew_qed:n
             {\brt_seq_item:Nn \g__brt_proof_qeds_seq
                 {\g__brt_proof_nesting_level_int}}}
        {\end{proofOld}
         \int_gdecr:N \g__brt_proof_nesting_level_int}

    % Default qed symbols.
    \newcommand \brtDefaultQeds
        {\(\square\),
         \(\boxtimes\),
         \(\blacksquare\),
         \(\checkmark\),
         \texttt{\small QED},
         \textsf{\tiny QED}}
    \brtQedsSet {\brtDefaultQeds}
}

\brt_declare_module:nnn {longhand} {requires = expl3-library} {
    % Useful macros for document authors that have long names prefixed by
    % `\brtLH...` which can be bound to the author's custom shorthands.
    % Although I try to tailor this module to a general audience, it undoubtably
    % makes opinionated choices about mathematical notation.

    % Text mode

    % TODO Build an index of terms defined by \brtLHDefine.
    \providecommand \brtLHDefine {\textbf}
    \providecommand \brtLHPredefine {\emph}

    % Maths mode

    % Needed inside of ExplSyntax.
    \providecommand \brtLHMaSubscript [2] {#1 \c_math_subscript_token {#2}}

    \providecommand \brtLHOperatorFmt [1] {\textsf {\upshape #1}}

    % \brtLHOperatorCons {csname} {symbol}
    \ProvideDocumentCommand \brtLHOperatorCons {mm}
        {\DeclareDocumentCommand {#1} {d() g}
            {\brtLHOperatorFmt {#2}
             \IfValueT {##1} {\qty(##1)}
             \IfValueT {##2} {\qty(##2)}}}

    \providecommand \brtLHProjectSymbol {\brtLHOperatorFmt {proj}}
    \providecommand \brtLHRestrictSymbol {\brtLHOperatorFmt {res}}

    \brtLHOperatorCons \brtLHDomainOp {dom}
    \brtLHOperatorCons \brtLHCodomainOp {codom}
    \brtLHOperatorCons \brtLHKernelOp {ker}
    \brtLHOperatorCons \brtLHCokernelOp {coker}
    \brtLHOperatorCons \brtLHImageOp {image}
    \brtLHOperatorCons \brtLHLimitOp {lim}
    \brtLHOperatorCons \brtLHDegreeOp {deg}
    \brtLHOperatorCons \brtLHSignOp {sgn}
    \brtLHOperatorCons \brtLHLengthOp {length}

    \providecommand \brtLHImageSet [2] {#1 \qty[#2]}
    \providecommand \brtLHInverseMap [1] {{#1}^{-1}}
    \providecommand \brtLHInverseSet [2] {\brtLHInverseMap {#1} \qty[#2]}

    \providecommand \brtLHCartesianPower [2] {{}^{#2}{#1}}

    \providecommand \brtLHRestrict [2] {#1 \restriction #2}

    \providecommand \brtLHMidQty [2] {\left.#1\ \middle\vert\ #2\right.}
    \providecommand \brtLHDivQty [2] {\left.#1\middle/#2\right.}

    % \brtLHSetCons {element expression} {set specification}
    \providecommand \brtLHSetCons [2] {\qty{\brtLHMidQty {#1} {#2}}}

    % \brtLHFamilyCons {input expression} {output expression}
    \providecommand \brtLHFamilyCons [2] {\brtLHMaSubscript {\qty(#2)} {#1}}

    % \brtLHIndexedFamily {index} {input expression} {output expression}
    \ProvideDocumentCommand \brtLHIndexedFamily {mmm}
        {\brtLHFamilyCons
            {\brt_anon:nn {#1} {#2}}
            {\brt_anon:nn {#1} {#3}}}

    % \brtLHIndexedSet {index} {element expression} {set specification}
    \ProvideDocumentCommand \brtLHIndexedSet {mmm}
        {\brtLHSetCons
            {\brt_anon:nn {#1} {#2}}
            {\brt_anon:nn {#1} {#3}}}

    \providecommand \brtLHFrom {\leftarrow}
    \providecommand \brtLHLogicalImplies {\Rightarrow}
    \providecommand \brtLHLogicalIff {\Leftrightarrow}

    \providecommand \brtLHDummyCdot {\,\cdot\,}
    \providecommand \brtLHAnonParamSymbol {\bullet}

    \providecommand \brtLHSeqConcatSymbol {{}^\frown}

    \providecommand \brtLHUnionSymbol {\bigcup}
    \providecommand \brtLHIntersectSymbol {\bigcap}
    \providecommand \brtLHCoproductSymbol {\bigsqcup}
    \providecommand \brtLHProductSymbol {\bigsqcap}
}

\brt_declare_module:nnn {shorthand} {requires = longhand} {
    % The package author's shorthands. Beware.

    % Text mode

    \providecommand \define {\brtLHDefine}
    \providecommand \predefine {\brtLHPredefine}

    % Maths mode

    % when you only want one number for a multi-line equation block
    \providecommand \nn {\nonumber}

    \brt_cs_gswap:NN \epsilon \varepsilon
    \brt_cs_gswap:NN \phi \varphi
    \brt_cs_gset_save_old:NN \leq \leqslant
    \brt_cs_gset_save_old:NN \geq \geqslant

    \providecommand \project {\brtLHProjectSymbol}
    \providecommand \proj {\brtLHProjectSymbol}
    \providecommand \restrict {\brtLHRestrictSymbol}
    \providecommand \res {\brtLHRestrictSymbol}

    \providecommand \domain {\brtLHDomainOp}
    \providecommand \dom {\brtLHDomainOp}
    \providecommand \codomin {\brtLHCodomainOp}
    \providecommand \codom {\brtLHCodomainOp}
    \providecommand \ker {\brtLHKernelOp}
    \providecommand \coker {\brtLHCokernelOp}
    \providecommand \image {\brtLHImageOp}
    \providecommand \limit {\brtLHLimitOp}
    \providecommand \lim {\brtLHLimitOp}
    \providecommand \deg {\brtLHDegreeOp}
    \providecommand \sgn {\brtLHSignOp}
    \providecommand \length {\brtLHLengthOp}
    \providecommand \len {\brtLHLengthOp}

    \providecommand \imageset {\brtLHImageSet}
    \providecommand \inversemap {\brtLHInverseMap}
    \providecommand \inverseset {\brtLHInverseSet}

    \providecommand \cartpow {\brtLHCartesianPower}

    \providecommand \buildset {\brtLHSetCons}
    \providecommand \buildfamily  {\brtLHFamilyCons}

    \providecommand \idxedset {\brtLHIndexedSet}
    \providecommand \idxedfamily  {\brtLHIndexedFamily}

    \providecommand \from {\brtLHFrom}
    \providecommand \limplies {\brtLHLogicalImplies}
    \providecommand \liff {\brtLHLogicalIff}

    \providecommand \dummycdot {\brtLHDummyCdot}

    \providecommand \concat {\brtLHSeqConcatSymbol}

    \providecommand \union {\brtLHUnionSymbol}
    \providecommand \intersect {\brtLHIntersectSymbol}
    \providecommand \coproduct {\brtLHCoproductSymbol}
    \providecommand \product {\brtLHProductSymbol}
    \providecommand \coprod {\brtLHCoproductSymbol}
    \providecommand \prod {\brtLHProductSymbol}
}

% Process modules.
% (For some reason this cannot be put in a \AtEndOfPackage.)
\brt_request_module:n {core-external-dependencies}
\brt_load_modules:
